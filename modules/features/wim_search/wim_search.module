<?php
/**
 * @file
 * Code for the WIM Search feature.
 */

include_once 'wim_search.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function wim_search_entity_info_alter(&$entity_info) {
  // Make search result view mode name more understandable.
  $entity_info['node']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wim_search_form_apachesolr_search_custom_page_search_form_alter(&$form, &$form_state, $form_id) {
  // Hide input terms label.
  $form['basic']['keys']['#title_display'] = 'invisible';
}

/**
 * Implements hook_form_alter().
 */
function wim_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_admin_settings') {
    $form['highlight']['#type'] = 'fieldset';
    $form['highlight']['#title'] = t('Search keyword highlighting');
    $form['highlight']['keyword_highlighting_search'] = array(
      '#type' => 'radios',
      '#title' => t('Highlight keyword'),
      '#default_value' => variable_get('keyword_highlighting_search', 0),
      '#options' => array(t('Disabled'), t('Enabled')),
    );
    $form['#submit'][] = '_search_highlighting_form_submit';
  }
  if (in_array($form_id, ['search_block_form', 'apachesolr_search_custom_page_search_form'], TRUE)) {
    array_unshift($form['#submit'], '_search_form_submit');
  }
}

/**
 * Add a submit handler/function to the form.
 */
function _search_highlighting_form_submit($form, &$form_state) {
  if (isset($form['highlight']['keyword_highlighting_search']['#value'])) {
    variable_set('keyword_highlighting_search', $form['highlight']['keyword_highlighting_search']['#value']);
  }
}

/**
 * Implements hook_apachesolr_query_alter().
 *
 * Configure the query to treat words as joined by "AND" instead of the default
 * "OR".
 */
function wim_search_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  // Setting mm (Minimum Should Match) to 100% treats the query as "AND".
  $query->addParam('mm', '100%');
}

/**
 * Implements hook_preprocess_html().
 */
function wim_search_preprocess_html(&$vars) {
  // Set title for search page.
  $menu_item = menu_get_item();

  if (is_array($menu_item) && $menu_item['path'] === 'search/site/%') {
    // Set title for search page.
    $vars['head_title'] = implode(' | ', array(
      t('Searchpage'),
      variable_get('site_name'),
    ));
  }
}

/**
 * Add a submit handler/function to the form.
 */
function _search_form_submit($form, &$form_state) {
  // Get form input value key.
  $form_id = $form_state['build_info']['form_id'];
  $value_key = $form_id === 'search_block_form' ? $form_id : 'keys';
  // Filter and update search value.
  $safe = filter_xss($form_state['values'][$value_key]);
  $form_state['values'][$value_key] = $safe;
}

/**
 * Implements hook_apachesolr_process_results().
 */
function wim_search_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
  $items_to_exclude = [];

  foreach ($results as $result) {
    if (isset($result['bundle']) && $result['bundle'] == 'linked_keywords') {
      global $base_url;
      $node = node_load($result['fields']['entity_id']);

      // Get the node where we are referring to.
      $referenced_content = $node->field_referenced_content[LANGUAGE_NONE][0];
      $referenced_node = explode($base_url . '/', $referenced_content['url']);
      $referenced_node = explode('node/', drupal_get_normal_path($referenced_node[1]));

      // Set nid for exclude
      $items_to_exclude[] = $referenced_node[1];
    }
  }

  // Exclude from search result
  if (!empty($items_to_exclude)) {
    foreach ($results as $result_id => $result) {
      if(in_array($result['fields']['entity_id'], $items_to_exclude)){
        unset($results[$result_id]);
      }
    }
  }
}
