<?php
/**
 * @file
 * Code for the Atos Esuite feature.
 */

define('ATOS_ESUITE_FAQ', 'vac');
define('ATOS_ESUITE_PRODUCT', 'pdc');

include_once 'atos_esuite.features.inc';
/**
 * @file
 * Main module.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function atos_esuite_ctools_plugin_directory($module, $plugin) {
  if ($module === 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function atos_esuite_permission() {
  return [
    'start atos import' => [
      'title' => t('Start Atos import'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function atos_esuite_menu() {
  $items = [];

  $items['admin/config/content/atos-esuite'] = [
    'title' => 'Atos eSuite',
    'description' => 'Atos import settings.',
    'page arguments' => ['atos_esuite_admin_settings_form'],
    'page callback' => 'drupal_get_form',
    'access arguments' => ['start atos import'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'atos_esuite.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_node_delete().
 */
function atos_esuite_node_delete($node) {
  if (in_array($node->type, ['product', 'faq'])) {
    db_delete('atos_esuite')->condition('nid', $node->nid)->execute();
  }
}

/**
 * Implements hook_cron().
 */
function atos_esuite_cron() {
  module_load_include('inc', 'atos_esuite', 'atos_esuite.import');
  atos_esuite_import_batch_start();
}

/**
 * Implements hook_cronapi().
 */
function atos_esuite_cronapi($op, $job = NULL) {

  $items['atos_esuite_cron'] = [
    'description' => 'Run Atos E-suite import.',
    'rule' => '37 3 * * *',
    // Default callback "atos_esuite_cron".
  ];

  return $items;
}

/**
 * Helper function to get node id by identifier from atos_esuite table.
 *
 * @param string $id
 *    Atos identifier.
 *
 * @return string
 *    Node id.
 */
function atos_esuite_get_nid_by_id($id) {
  $q = db_select('atos_esuite', 'a')
    ->fields('a', ['identifier', 'nid'])
    ->condition('a.identifier', $id);
  $rs = $q->execute()->fetch();
  if ($rs) {
    return $rs->nid;
  }
  return $id;
}

/**
 * Helper function to get identifier by node id from atos_esuite table.
 *
 * @param string $nid
 *    Node id.
 *
 * @return string
 *    Atos identifier.
 */
function atos_esuite_get_id_by_nid($nid) {
  $q = db_select('atos_esuite', 'a')
    ->fields('a', ['identifier', 'nid'])
    ->condition('a.nid', $nid);
  $result = $q->execute()->fetch();
  if ($result) {
    return $result->identifier;
  }
  return $nid;
}

/**
 * Notify administrator about missing items after import by email.
 *
 * @param array $nodes
 *   Array of nodes.
 * @param string $type
 *   Type of node.
 */
function atos_esuite_notify($nodes, $type) {
  drupal_mail('atos_esuite', 'notice', variable_get('site_mail'), LANGUAGE_NONE, [
    'nodes' => $nodes,
    'type' => $type,
  ]);
}

/**
 * Implements hook_mail().
 */
function atos_esuite_mail($key, &$message, $params) {
  switch ($key) {
    case 'notice':
      $list = [];
      $url = variable_get('atos_esuite_url', '');
      $message['subject'] = t('Atos eSuite import notification');
      foreach ($params['nodes'] as $id => $nid) {
        $list[] = 'Node: ' . url('node/' . $nid, ['absolute' => TRUE]) . PHP_EOL .
          'Feed: ' . url($url, [
            'external' => TRUE,
            'query' => ['id' => $id],
          ]) . PHP_EOL;
      }
      $message['body'][] = t('During import !type this nodes was unpublished.!brPlease check them!br!list', [
        '!list' => PHP_EOL . implode(PHP_EOL, $list),
        '!type' => $params['type'],
        '!br' => PHP_EOL,
      ]);
      break;

    case 'failed':
      $message['subject'] = t('Atos eSuite import failed');
      $message['body'][] = t('Import failed.');
      break;
  }
}
