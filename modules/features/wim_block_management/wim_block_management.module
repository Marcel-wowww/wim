<?php
/**
 * @file
 * Code for the WIM Block Management feature.
 */

include_once 'wim_block_management.features.inc';
include_once 'wim_block_management.functions.inc';

define('WIM_BLOCK_MANAGEMENT_BOOTSTRAP_FULL_WIDTH', 12);

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wim_block_management_form_felix_attributes_form_alter(&$form, &$form_state) {
  // Inform Felix about our configs.
  $form['#felix_block_config'] = TRUE;

  $felix_block = $form['#felix_block'];
  $config = isset($felix_block->data['config']) ? $felix_block->data['config'] : array();

  $form['bootstrap_layout'] = array(
    '#title' => t('Bootstrap layout'),
    '#type' => 'select',
    '#options' => _wim_block_management_get_columns_options(),
    '#default_value' => isset($config['bootstrap_layout']) ? $config['bootstrap_layout'] : 12,
  );
  $form['new_row'] = array(
    '#title' => t('New row'),
    '#type' => 'checkbox',
    '#default_value' => isset($config['new_row']) ? $config['new_row'] : FALSE,
    '#description' => t('Check this to show block in a new row, otherwise it will respect other blocks in region and try to move them in the same row based on bootstrap layout selected above.'),
  );
  $form['row_weight'] = array(
    '#type' => 'weight',
    '#title' => t('Row weight'),
    '#default_value' => isset($config['row_weight']) ? $config['row_weight'] : 0,
  );

  if ($felix_block->module === 'bean') {
    $bean = bean_load_delta($felix_block->delta);
    $form['subject']['#description'] = t('Leave empty to use the title from the bean block.');
    $entity_type = $bean->entityType();
    $bundle = $bean->type;

    $entity_info = entity_get_info($entity_type);
    $view_mode_list = $entity_info['view modes'];
    $view_mode_settings = field_view_mode_settings($entity_type, $bundle);

    foreach ($view_mode_list as $view_mode_name => $view_mode_info) {
      if (!empty($view_mode_settings[$view_mode_name]['custom_settings'])) {
        $view_modes[$view_mode_name] = $view_mode_info['label'];
      }
    }

    // If no custom view modes selected, add default.
    $view_modes['default'] = t('Default');

    $form['bean_view_mode'] = array(
      '#title' => t('View mode'),
      '#type' => 'select',
      '#options' => $view_modes,
      '#default_value' => isset($config['bean_view_mode']) ? $config['bean_view_mode'] : $bean->view_mode,
      '#description' => t('Select view mode for this block.'),
    );
  }

}

/**
 * Implements hook_block_config_save().
 */
function wim_block_management_felix_block_config_save($block, $values) {
  $configs = array();
  $felix_custom_configs = array(
    'bootstrap_layout',
    'new_row',
    'bean_view_mode',
    'row_weight',
  );

  foreach ($felix_custom_configs as $config) {
    if (isset($values[$config])) {
      $configs[$config] = $values[$config];
    }
  }

  return $configs;
}

/**
 * Implements hook_entity_info_alter().
 */
function wim_block_management_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['felix'] = array(
    'label' => t('Felix'),
    'custom settings' => FALSE,
  );
  $entity_info['bean']['view modes']['link_title'] = array(
    'label' => t('Title with link'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_delete().
 */
function wim_block_management_entity_delete($entity, $type) {
  // Remove all felix blocks when bean block is deleted.
  if ($type === 'bean' && module_exists('felix')) {
    db_delete('felix_block')
      ->condition('module', 'bean')
      ->condition('delta', $entity->delta)
      ->execute();
  }
}

/**
 * Implements hook_preprocess_page().
 */
function wim_block_management_preprocess_page(&$variables) {
  $module_path = drupal_get_path('module', 'wim_block_management');
  // Add extra js and css for the Felix add page.
  if (current_path() === 'felix-blocks/add' && !isset($_GET['token'])) {
    drupal_add_js($module_path . '/js/wim_block_management.js');
    drupal_add_css($module_path . '/css/wim_block_management.css');
  }

  // Add css for Felix regions on all pages.
  drupal_add_css($module_path . '/css/felix.css');

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wim_block_management_form_felix_remove_form_alter(&$form, &$form_state, $form_id) {
  // Fix title text for Subjects which contains HTML tags.
  if (isset($form['#felix_block'], $form['#felix_region'], $form['info'])) {
    $block = $form['#felix_block'];
    $region = $form['#felix_region'];
    $form['info'] = array(
      '#markup' => '<p>' . t('Are you sure you want to delete the block %subject from %region?', array(
        '%subject' => strip_tags($block->subject),
        '%region' => $region->title,
      )) . '</p>',
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function wim_block_management_form_alter(&$form, &$form_state, $form_id) {
  // Hide redirect field.
  if (in_array($form_id, array('bean_form', 'user_profile_form'), TRUE)) {
    $form['redirect']['#access'] = FALSE;
  }
}

/**
 * Implements hook_bean_types_api_info().
 */
function wim_block_management_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function wim_block_management_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'wim_block_management') . '/plugins';
  $plugins['editorial'] = array(
    'label' => t('Editorial'),
    'handler' => array(
      'class' => 'BeanEditorial',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
    'file' => 'BeanEditorial.class.php',
  );
  return $plugins;
}